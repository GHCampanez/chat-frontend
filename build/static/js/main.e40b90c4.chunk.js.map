{"version":3,"sources":["isAuthenticated.js","components/Home.jsx","App.js","serviceWorker.js","components/Chat.jsx","components/notfound.js","components/Register.jsx","index.js"],"names":["isAuthenticated","state","user","token","api","axios","create","baseURL","headers","Home","props","handleForm","e","a","preventDefault","name","password","post","then","res","data","history","push","catch","err","request","console","error","response","setState","warning","users","target","value","type","checked","this","className","onSubmit","onChange","handleInputChange","id","placeholder","onClick","React","Component","withRouter","App","Boolean","window","location","hostname","match","Chat","componentWillMount","buildApi","get","filter","d","sendMessage","messages","message","chatName","selectFriend","friend","buildChatName","getChat","log","params","interval","setInterval","bind","replace","split","sort","join","clearInterval","map","ev","data-toggle","data-target","signOut","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","key","_id","NotFound","Register","createdAt","Date","alert","routing","exact","path","component","rest","render","to","pathname","from","Notfound","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e40b90c4.chunk.js","sourcesContent":["export const isAuthenticated = {\r\n    state: false,\r\n    user: {},\r\n    token: ''\r\n};","import React from 'react'\r\nimport { isAuthenticated } from '../isAuthenticated'\r\nimport axios from 'axios'\r\nimport {  withRouter} from 'react-router-dom';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:5000',\r\n    headers: { 'Authorization': 'Bearer ' + isAuthenticated.token }\r\n})\r\n\r\n\r\nclass Home extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            users: {},\r\n            name: '',\r\n            password: '',\r\n            warning: ''\r\n        }\r\n\r\n    }\r\n\r\n    handleInputChange(e) {\r\n        const target = e.target\r\n        const value = target.type === 'checkbox' ? target.checked : target.value\r\n        const name = target.name\r\n\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    handleForm = async (e) => {\r\n        e.preventDefault()\r\n\r\n        if (this.state.name !== '' && this.state.password !== '') {\r\n            await api.post('/user/verify', {\r\n                name: this.state.name,\r\n                password: this.state.password\r\n            })\r\n                .then(res => {\r\n                    isAuthenticated.state = true\r\n                    isAuthenticated.token = res.data.token\r\n                    isAuthenticated.user = res.data.user.name\r\n                    this.props.history.push(`/chat/${res.data.user.name}`)\r\n                })\r\n                .catch(err => {\r\n                    if (err.request) {\r\n                        console.error(err.request.response)\r\n                        this.setState({ warning: 'Please, check your username and password' })\r\n                    }\r\n                })\r\n        } else {\r\n            this.setState({ warning: 'Please, check your username and password' })\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-8\">\r\n                        <h2>Login</h2>\r\n                        <form onSubmit={(e) => this.handleForm(e)}>\r\n                            <div className=\"form-group\">\r\n                                <label>Name</label>\r\n                                <input onChange={(e) => this.handleInputChange(e)} name=\"name\" type=\"text\" className=\"form-control\" value={this.state.name} id=\"name\" placeholder=\"Enter a name\" />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Password</label>\r\n                                <input onChange={(e) => this.handleInputChange(e)} type=\"password\" className=\"form-control\" value={this.state.password} id=\"password\" name=\"password\" placeholder=\"Password\" />\r\n                            </div>\r\n                            <small className=\"form-text text-danger\">\r\n                                {this.state.warning}\r\n                            </small>\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Sign in</button>\r\n                            <button type=\"button\" onClick={() => this.props.history.push('/signup')} className=\"btn btn-secondary m-2\">Sign up</button>\r\n\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Home)\r\n\r\n","import React from 'react'\nimport Home from './components/Home'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Home />\n      </div>\n    )\n  }\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport { isAuthenticated } from '../isAuthenticated'\r\nimport axios from 'axios'\r\nimport { withRouter } from 'react-router-dom'\r\nimport '../style/Chat.css'\r\n\r\n\r\n\r\n\r\nclass Chat extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            user: this.props.match.params.user,\r\n            message: '',\r\n            messages: [],\r\n            users: [{ id: 1, name: 'Pedro' }, { id: 2, name: 'Matheus' }],\r\n            chatName: '',\r\n            interval: setInterval(\r\n                function () {\r\n                    this.getChat(this.state.chatName)\r\n                }\r\n                    .bind(this),\r\n                3000\r\n            )\r\n        };\r\n\r\n        console.log(isAuthenticated)\r\n    }\r\n\r\n\r\n    componentWillMount = () => {\r\n        const api = this.buildApi()\r\n        api.get('/chat/users')\r\n            .then(data => {\r\n                let users = data.data.filter(d => d.name !== this.state.user)\r\n                this.setState({ users })\r\n            })\r\n\r\n    }\r\n\r\n    buildApi = () => {\r\n        return axios.create({\r\n            baseURL: 'http://localhost:5000',\r\n            headers: { 'Authorization': 'Bearer ' + isAuthenticated.token }\r\n        })\r\n    }\r\n    sendMessage = () => {\r\n\r\n        const api = this.buildApi()\r\n        const messages = [...this.state.messages, { message: this.state.message, user: this.state.user }]\r\n        api.post(`/chat/conversation`, {\r\n            chatName: this.state.chatName,\r\n            messages: messages\r\n        })\r\n\r\n        this.setState({ messages })\r\n        this.setState({ message: '' });\r\n    };\r\n\r\n    selectFriend = friend => {\r\n\r\n        const chatName = this.buildChatName(friend.name, this.state.user)\r\n        this.setState({ chatName })\r\n\r\n        this.getChat(chatName)\r\n    }\r\n\r\n    getChat = (chatName) => {\r\n        console.log(`Buscando chat  ${chatName}`)\r\n        const api = this.buildApi()\r\n        if (chatName !== '')\r\n            api.get(`/chat/conversation?chat=${chatName}`)\r\n                .then(data => {\r\n                    this.setState({ messages: data.data.messages })\r\n                })\r\n    }\r\n\r\n    buildChatName(friend, user) {\r\n        let chatName = ((friend + user).replace(/\\s+/g, \"\")).split('')\r\n        chatName.sort()\r\n        chatName = chatName.join('')\r\n\r\n        return chatName\r\n    }\r\n\r\n    signOut() {\r\n        \r\n        clearInterval(this.state.interval)\r\n        isAuthenticated.state = false\r\n        isAuthenticated.token = ''\r\n        isAuthenticated.user = ''\r\n        this.props.history.push('/')\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-body\">\r\n                                <div className=\"card-title\">\r\n                                    <h2>Global Chat</h2>\r\n                                    <span>Welcome {this.state.user}</span>\r\n                                </div>\r\n                                <hr />\r\n                                <div className=\"messages scroll \">\r\n                                    {this.state.messages.map(message => {\r\n                                        return (\r\n                                            <div>{message.user}: {message.message}</div>\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className=\"card-footer\">\r\n                                <input type=\"text\" placeholder=\"Message\" className=\"form-control\" value={this.state.message} onChange={ev => this.setState({ message: ev.target.value })} />\r\n                                <br />\r\n                                <button onClick={() => this.sendMessage()} className=\"btn btn-primary form-control\">Send</button>\r\n                                <br />\r\n                                <br />\r\n                                <button type=\"button\" className=\"btn btn-secondary\" data-toggle=\"modal\" data-target=\"#exampleModal\">\r\n                                    Find a friend\r\n                                </button>\r\n                                <button type=\"button\" className=\"btn btn-danger m-2\" onClick={() => this.signOut()}>\r\n                                    Sign Out\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"modal fade\" id=\"exampleModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                    <div className=\"modal-dialog\" role=\"document\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\" id=\"exampleModalLabel\">Find a Friend</h5>\r\n                                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                    <span aria-hidden=\"true\">&times;</span>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <div className=\"list-group\">\r\n                                    {this.state.users.map(user => {\r\n                                        return (\r\n                                            <button key={user._id} type=\"submit\" onClick={() => this.selectFriend(user)} data-dismiss=\"modal\" className=\"list-group-item list-group-item-action\">{user.name}</button>\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Chat)","import React from 'react'\r\n\r\nclass NotFound extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <center>\r\n                    <pre>Have patience, come back later.</pre>\r\n                    <footer>UTFPR</footer>\r\n                </center>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default NotFound","import React, { Component } from 'react'\r\n\r\nimport { isAuthenticated } from '../isAuthenticated'\r\nimport axios from 'axios'\r\nimport {  withRouter} from 'react-router-dom';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:5000',\r\n    headers: { 'Authorization': 'Bearer ' + isAuthenticated.token }\r\n})\r\n\r\nclass Register extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            users: {},\r\n            name: '',\r\n            password: ''\r\n        }\r\n    }\r\n\r\n    handleInputChange(e) {\r\n        const target = e.target\r\n        const value = target.type === 'checkbox' ? target.checked : target.value\r\n        const name = target.name\r\n\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    handleForm = async (e) => {\r\n        e.preventDefault()\r\n        await api.post('/user/register', {\r\n            name: this.state.name,\r\n            password: this.state.password,\r\n            createdAt: new Date()\r\n        })\r\n            .then(res => {\r\n                isAuthenticated.state = true\r\n                isAuthenticated.token = res.data.token\r\n                isAuthenticated.user = res.data.user\r\n                this.props.history.push('/')\r\n            })\r\n            .catch(err => {\r\n                if (err.request) {\r\n                    console.error(err.request.response)\r\n                    alert(err.request.response)\r\n                }\r\n            })\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-8\">\r\n                        <h2>SingUp</h2>\r\n                        <form onSubmit={(e) => this.handleForm(e)}>\r\n                            <div className=\"form-group\">\r\n                                <label>Name</label>\r\n                                <input onChange={(e) => this.handleInputChange(e)} name=\"name\" type=\"text\" className=\"form-control\" value={this.state.name} id=\"name\" placeholder=\"Enter a name\" />\r\n                                <small id=\"nameHelp\" className=\"form-text text-muted\">Your information is safe with us.</small>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Password</label>\r\n                                <input onChange={(e) => this.handleInputChange(e)} type=\"password\" className=\"form-control\" value={this.state.password} id=\"password\" name=\"password\" placeholder=\"Password\" />\r\n                            </div>\r\n                            <button type=\"submit\" className=\"btn btn-info\">Submit</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(Register)\r\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Chat from './components/Chat'\nimport Notfound from './components/notfound'\nimport { Route, BrowserRouter as Router, Switch, Redirect  } from 'react-router-dom'\nimport Register from './components/Register';\nimport { isAuthenticated } from './isAuthenticated';\n\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n    <Route {...rest} render={props => (\n        isAuthenticated.state ? (\n            <Component {...props} />\n        ) : (\n                <Redirect to={{ pathname: '/', state: { from: props.location } }} />\n            )\n    )} />\n)\n\nconst routing = (\n    <Router>\n        <Switch>\n            <Route exact path=\"/\" component={App} />\n            <Route exact path=\"/signup\" component={Register} />\n            <PrivateRoute exact path=\"/chat/:user\" component={Chat} />\n            <Route component={Notfound} />\n        </Switch>\n    </Router>\n)\nReactDOM.render(routing, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}